#!/usr/bin/env bash
#
# Copyright 2013-2019 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# exit if an uninitialised variable is used
#set -o nonunset
# exit of statement returns a non-true return value
#set -o errexit

VERSION=0.61

# Filename of this script
SCRIPT=${0##*/}

_DEBUG=false

# Help text for this script
HELP=\
"$SCRIPT [<options>] <command> [<arguments]

<command>
  co, cookbook <name>             Add a cookbooks to the configuration.
                                  Search paths defined by CHEF_COOKBOOKS
  ro, role <path>                 Add a role to the configuration
  so, solo                        Copy the configuration to the virtual
                                  machine instance and execute Chef.
  
<options>
  -r,--run-list <role>[,<role>]  Chef run-list to be executed (comma separated)
  -d,--destination <path>        Directory used for the configuration 
                                 in the virtual machine instance.
                                 (defaults to /var/tmp/chef)
  -V, --version                  Print version information.
  -D,--debug                     Run in debug mode.
  -h,--help                      Show this information.

Following directories and files contain the configuration used to
execute chef-solo on the target virtual machine instance:

   chef_attributes.json
   chef_config.json
   cookbooks/
   data-bags/
   roles/"

# enable line numbers for debug output
if [ "$_DEBUG" = "true" ] ; then
  export PS4='(${BASH_SOURCE}:${LINENO}):${FUNCNAME[0]}-[${SHLVL},${BASH_SUBSHELL},$?] '
fi

function _debug() {
  if [ "$_DEBUG" = "true" ]; then
    echo 1>&2 "Debug: $@"
  fi
}

function _error() {
  echo 1>&2 "Error: $@"
  echo "See \`$SCRIPT --help\` for usage."
}

# Default destination directory used on the remote node
dest=/var/tmp/chef
run_list=

# Parse the command line options
ARGS=$(getopt -o vhdr:d: -l "version,help,debug,run-list:,destination:" -- "$@")
eval set -- "$ARGS"
while true; do
  case "$1" in
    -d|--destination)
      shift
      dest=$1
      shift
      ;;
    -r|--run-list)
      shift
      run_list=$(echo "$1" | sed 's/,/","/g')
      shift
      ;;
    -v|--version)
      echo "$VERSION"
      exit 0
      ;;
    -h|--help)
      echo "$HELP"
      exit 0
      ;;
    -d|--debug)
      export _DEBUG=true
      shift
      ;;
    --) shift; break ;;
    *) break ;;
  esac
done

# Path to the users Chef cookbooks
CHEF_COOKBOOKS_DEFAULT="$HOME/chef/cookbooks:$HOME/chef/site-cookbooks"
CHEF_COOKBOOKS=${CHEF_COOKBOOKS:-$CHEF_COOKBOOKS_DEFAULT}

# Template for the chef-solo configuration file
# shipped to the virtual machines before execution.
CHEF_SOLO_CONFIG=$(cat <<EOF
log_level         :fatal
log_location      STDOUT
verbose_logging   nil
verify_api_cert   true
cookbook_path     ["$dest/cookbooks"]
data_bag_path     "$dest/data-bags"
role_path         "$dest/roles"
cache_type        "BasicFile"
cache_options({   :path => "$dest/cache/checksums", :skip_expires => true })
chef_license      "accept"
EOF
)

# Create directories if missing 
for dir in cookbooks roles data-bags
do
  if [ ! -d "$dir" ] 
  then
    mkdir $dir
    _debug "Creating $dir directory"
  fi
done

# If option `-r` was set by the user
if [ -n "$run_list" ]
then
  echo "{ \"run_list\": [ \"$run_list\" ] }" > chef_attributes.json
fi


function cookbook() {
  # add multiple cookbooks at once by argument list
  for cookbook in $@
  do
    # Continue only if cookbook link doesn't exist
    if [ -h $PWD/cookbooks/$cookbook ]
    then
      _debug "Cookbook [$cookbook] already linked"
      continue
    fi
    local found=false
    # support multiple cookbook directories in a colon separated list
    for cookbook_path in $(echo $CHEF_COOKBOOKS | tr ":" " ")
    do
      # if the source cookbook is found
      if [ -d $cookbook_path/$cookbook ]
      then
        if [ ! -h $PWD/cookbooks/$cookbook ]
        then
          # link to the source cookbook
          ln -s $cookbook_path/$cookbook $PWD/cookbooks/$cookbook
          found=""
          echo "Cookbook '$cookbook' added"
          continue
        fi
      fi
    done
    if [ "$found" ]
    then
      _error "Cookbook [$cookbook] not found!"
    fi
  done
}

function role() {
        # iterate over all arguments
        for role in "$@"
        do
                # name of the file
                local name=$(basename $role)
                # Tests if file exist. If not, skip it!
                if ! [ -f $role ]; then
                        echo "File not found: '${role}' - Skipped!"
                        continue
                fi
                # target path in the roles/ subdirectory
                local t_path=$PWD/roles/$name
                # unless the file exists
                if ! [ -f $t_path ]
                then
                        # link to the file in roles/
                        ln -s $role $t_path
                        echo "${name} role added"
                else
                        echo "${name} role exists"
                fi
        done
}

function solo() {
  
  host=$1

  # Write the chef configuration file if not existing
  if [[ ! -e chef_config.rb ]]; then
    echo "$CHEF_SOLO_CONFIG" > chef_config.rb
    _debug "Chef configuration created in chef_config.rb"
  fi

  # Make sure the user edits the Chef attributes
  if [[ ! -e chef_attributes.json ]]; then
    echo "{ \"run_list\": [ \"empty\" ] }" > chef_attributes.json
    echo "No run-list configuration definition to run chef-solo!"
    echo "Add cookbooks,roles and attributes to the file chef_attributes.json"
  fi

  # If the cookbooks/ directory is empty?
  if [ ! "$(find $PWD/cookbooks -maxdepth 1 -type l 2> /dev/null)" ]
  then
    _error "No Chef cookbooks defined yet."
    exit 1
  fi
  
  # Did the user modified the attributes file?
  (cat chef_attributes.json | grep "empty" 1>/dev/null)
  if [ $? -eq 0 ]
  then
    _error "Customize the run-list!"
    exit 1
  fi

  # Create the base directory one the remote node
  ssh-instance $host "[ -d $dest ] || mkdir -p $dest"
  # Upload the Chef data and configuration files
  rsync-instance "cookbooks roles data-bags chef_*" $host:$dest/ 2>&1 1>>sync.log
  # Run chef-solo on the remote node
  ssh-instance -s $host "chef-solo -c $dest/chef_config.rb -j $dest/chef_attributes.json"
}

# Read the command-line arguments
_command=${1:-solo} ; shift
case "$_command" in
  # call functions for each command
  "cookbook"|"co") cookbook "$@" ;;
  "role"|"ro") role "$@" ;;
  "solo"|"so") solo "$@" ;;
  *) _error "No enough arguments!" ; exit 1 ;;
esac

exit 0


