#!/usr/bin/env ruby
#
# Copyright 2013-2016 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong'
require 'logger'

class System 
  
  def self.exec(command)
    command + ' 2>&1'
    $logger.debug("Exec [#{command}]")
    # Execute command as subprocess and return the exit code
    pipe = IO.popen(command)
    # Get the process ID from the child
    pid = pipe.pid
    # Read the output from the stream
    output = pipe.read
    # Wait for successful return and pass back the code to the caller
    Process.wait(pid)
    state=$?
    $logger.debug "Returned with #{state}"
    if state == 0
      return output
    else
      $logger.warn "Failed to execute [#{command}]"
      return nil
    end
  end

end

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
#{exec_name} [<options>] [<ip>] [<path>]

  <ip>                            IP-address or hostname of the remote instance.
                                  (defaults to 10.1.1.28).
  <path>                          Target directroy to write the configuration file
                                  (defaults to ssh_config in the working directory).

<options>
  -d,--debug                      Show stacktraces in case of errors
  -h,--help                       Show this help information
  -i,--identity-file [<path>]     Identity key to use for the connection.
  -k,--kerberos                   Enable GSSAPI Kerberos authentication.
  -O,--overwrite                  Always overwrite existing configuration files.
  -u,--user <name>                User name for the connection.
     --version                    Program version number.
EOF

begin

  options = OpenStruct.new
  options.path = ENV['PWD']
  options.debug = false
  options.user = 'devops'
  options.id_file = String.new
  options.ip = '10.1.1.28'
  options.overwrite = false
  options.kerberos = false

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S"
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{exec_name} -- #{message}\n"
  end
  $logger.level = Logger::FATAL

  # Read all shell environment variables
  if ENV.has_key? 'VM_TOOLS_DEBUG'
    options.debug = true
    $logger.level = Logger::DEBUG
  end

  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--identity-file','-i',GetoptLong::REQUIRED_ARGUMENT],
    ['--kerberos','-k',GetoptLong::NO_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--overwrite','-O',GetoptLong::NO_ARGUMENT],
    ['--user','-u',GetoptLong::REQUIRED_ARGUMENT],
    ['--version',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      options.debug = true
      $logger.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--identity-file'
      options.id_file = File.expand_path(arg)
    when '--kerberos'
      options.kerberos = true
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
      end
    when '--overwrite'
      options.overwrite = true
    when '--user'
      options.user = arg
    when '--version'
      $stdout.puts 1.1
      exit 0
    end
  end

  hostname = ARGV[0] || options.ip

  if ARGV.length > 1
    options.path = ARGV[1]
    raise("#{options.path} not existing ") unless File.directory? options.path
  end
  config_file = "#{options.path}/ssh_config"
  
  if File.exists? config_file and not options.overwrite
    $stdout.print "Overwrite #{config_file}? (Enter/Y/y to continue) "
    answer = $stdin.gets.chomp
    exit 0 unless answer.empty? or "Y" == answer.upcase
  end

  config = Array.new
  config << "User #{options.user}"
  config << "HostName #{hostname}"
  config << "UserKnownHostsFile /dev/null"
  config << "StrictHostKeyChecking no"
  config << "GSSAPIAuthentication yes" if options.kerberos
  
  ##
  # If the user dose not provide an SSH key-pair
  if options.id_file.empty?
    
    # directory to store the SSH key
    path = "#{ENV['PWD']}/keys"
    System::exec('mkdir keys') unless File.directory?(path)
    # SSH key name
    key = "#{path}/id_rsa"
    unless File.exists?(key)
      System::exec("ssh-keygen -q -t rsa -b 2048 -N '' -f keys/id_rsa") 
      $stdout.puts("Password-less SSH key-pair create in #{path}")
    end
    # append to the SSH configuration 
    config << "IdentityFile #{key}"

  ##
  # The user provides an SSH key
  #
  else 
    if File.exists? options.id_file
      config << "IdentityFile #{options.id_file}"
    else
      raise("SSH identity file missing #{options.id_file}")
    end
  end

  ##
  # Write the SSH configuration file
  #
  System::exec(%Q[/bin/echo -e "Host instance\\n  #{config.join('\\n  ')}" > #{config_file} ])
  $stdout.puts "SSH configuration: #{config_file}"

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
