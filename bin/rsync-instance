#!/usr/bin/env bash
#
# Copyright 2013 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# exit if an uninitialised variable is used
#set -o nonunset
# exit of statement returns a non-true return value
#set -o errexit

VERSION=0.2

# Filename of this script
SCRIPT=${0##*/}

# Help text for this script
HELP=\
"Usage: 

  $SCRIPT [-Dh] [[user@hostname]:]src [[user@hostname]:]dest
  
Sync files with remote nodes. If a file called *ssh_config* is 
present in the working directory it will be automatically used 
if no remote hostname is defined. This script will add the 
hostname *instance* to the source or destination path prefixed 
with colon (:).

Options:

  -D,--debug
    Print debug output.
  -h,--help
    Show this information.
  -R,--relative
    Use relative paths.
  -r, --root
    Use the root account for login."


# enable line numbers for debug output
if [ "$_DEBUG" = "true" ] ; then
  export PS4='(${BASH_SOURCE}:${LINENO}):${FUNCNAME[0]}-[${SHLVL},${BASH_SUBSHELL},$?] '
fi

function _debug() {
  if [ "$_DEBUG" = "true" ]; then
    echo 1>&2 "Debug: $@"
  fi
}

function _error() {
  echo 1>&2 "Error: $@"
  echo "See \`$SCRIPT --help\` for usage."
}


user=
# Parse the command line options
ARGS=$(getopt -o DhRrV -l "help,debug,relative,root,version" -- "$@")
eval set -- "$ARGS"
while true; do
  case "$1" in
    -h|--help)
      echo "$HELP"
      exit 0
      ;;
    -D|--debug)
      _DEBUG=true
      shift
      ;;
    -R|--relative)
      relative_path='--relative'
      shift
      ;;
    -r|--root)
      user='-l root'
      shift
      ;;
    -V|--version)
      echo $VERSION
      exit 0
      ;;
    --) shift; break ;;
    *) break ;;
  esac
done

if [ -e "$PWD/ssh_config" ]
then
  RSYNC_RSH="ssh -q -F $PWD/ssh_config"
  _debug "Using SSH configuration in ssh_config"
  _debug "RSYNC_RSH=$RSYNC_RSH"
fi

RSYNC_RSH="$RSYNC_RSH $user"

paths=
for var in "$@"
do
  (echo "$var" | grep '^:' >/dev/null)
  if [ $? -eq 0 ]
  then
    paths="$paths instance$var "
    export RSYNC_RSH
  else
    paths="$paths $var "
  fi
done

# Ignore version control system directories
options="$options --exclude '.git' --exclude '.gitignore' --exclude '.svn'"
# Copy options...
options="$options $relative_path --omit-dir-times --recursive --copy-links --copy-dirlinks --delete"
# Verbose
options="$options --verbose"
command="$options $paths" 
_debug "[sync] rsync$command"

rsync $command

if [ $? -ne 0 ]
then
  _error "Couldn't rsync to $dst"
fi

unset RSYNC_RSH

exit 0


