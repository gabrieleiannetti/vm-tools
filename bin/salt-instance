#!/usr/bin/env ruby
#
# Copyright 2018 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
#{exec_name} [<options>] <command> [<arguments>]

<command>
   List commands

<options>
  -d, --debug                           Show stacktraces in case of errors.
  -h, --help                            Show this help information.
  -v, --version                         Print version number.
EOF

def file_create(file,content)
  # Create a configuration file if missing
  unless File.exist? file
    File.open(file,'w') do |f|
      f.puts content.gsub(/^    /,'')
    end
    $stdout.puts "#{file} written."
  end
end

begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  $options = OpenStruct.new
  $options.debug = false
  $options.instance = File.basename(ENV['PWD'])
  
  # get the network configuration
  $options.ip = `virsh-nat-bridge lookup #{$options.instance}`.split[1]
  $options.saltfile = "#{ENV['PWD']}/Saltfile"
  $options.saltdir = "#{ENV['PWD']}/salt"

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S"
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::WARN

  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--version','-v',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--version'
      $stdout.puts 0.1
      exit 0
    end
  end

  saltfile = <<-EOF
    salt-ssh:
      roster_file: ./salt/roster
      config_dir: ./salt
      ssh_log_file: ./salt.log
      ssh_max_procs: 10
      ssh_wipe: True
      ssh_rand_thin_dir: True
      ssh_sudo: True
      ssh_tty: True 
  EOF

  file_create($options.saltfile,saltfile)

  `mkdir #{$options.saltdir}` unless File.directory? $options.saltdir

  saltmaster = <<-EOF
    cachedir: /tmp/salt
    pki_dir: /tmp/salt
  EOF

  file_create("#{$options.saltdir}/master",saltmaster)

  saltroster = <<-EOF
    instance:
      host: #{$options.ip}
      user: root
      priv: #{ENV['PWD']}/keys/id_rsa
  EOF

  file_create("#{$options.saltdir}/roster",saltroster)

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
