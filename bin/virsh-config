#!/usr/bin/env ruby
#
# Copyright 2012 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'
require 'erb'

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
#{exec_name} [<options>] [<path>]

<path>: Path to the configuration file for the virtual machine instance
        (defaults to libvirt_instance.xml in working directory)

<options>
  -b,--bridge <name>               Network birdge (default nbr0)
  -c,--vcpu <num>                  Number of vCPUs (default 1)
  -C,--console                     Enable serial console
  -d,--debug                       Show stacktraces in case of errors.
  -D,--disks <path>[,<path>]       Disk images to uses (default `disk*.img`)
  -t,--disk-type qcow2|raw         Disk device type (default qcow2) 
  -h,--help                        Show this help information.
  -k,--kernel <path>               Linux kernel to boot
  -i,--initrd <path>               Init file-system to us with kernel
  -m,--mac-address <address>       MAC-address (default 02:FF:0A:0A:06:00)
  -M,--memory <size>               Memory in GB
  -n,--name <name>                 Name (default is the enclosing directory name)
  -N,--net-boot                    Enable PXE boot
  -O,--overwrite                   Overwrite target configuration file
  -p,--vnc-port <num>              VNC connection port
  -v,--vnc                         Enable VNC with automatic port allocation
  --version                        Print program version.
EOF

class Virsh
  
  def self.config(path)

    dir = File.dirname(path)

    unless $options.overwrite 
      if File.exists? path
        $stdout.print "Overwrite #{path}? (Enter/Y/y to continue) "
        answer = $stdin.gets.chomp
        exit 0 unless answer.empty? or "Y" == answer.upcase
      end
    end
    
    name = if $options.name.nil?
             dir.split('/')[-1]
           else
             $options.name
           end

    disks_list = if $options.disks.empty?
                   disks = Dir.glob("#{dir}/disk*.img")
                   if not disks.empty?
                     $logger.debug "disk(s) #{disks.join(',')}"
                   end
                   disks
                 else
                   $options.disks
                 end

    if disks_list.empty? and $options.kernel.nil?
      raise("Make sure to configure the source to boot! Either specify a kernel/initrd or a rootfs to boot from.")
    end

    ## 
    # Configure the disk images attached to the virtual machine instance
    #
    if not disks_list.empty? 
      id = 'a'
      disks = Array.new
      disks_list.sort.map do |disk|
        disks << %Q[
          <disk type="file" device="disk">
            <driver name="qemu" type="#{$options.disk_type}"/>
            <target dev="vd#{id}" bus="virtio"/>
            <source file="#{disk}"/>
          </disk>].gsub(/^    /,'')
        id = id.next
      end
    end 

    # render the XML configuration
    config = ERB.new(DATA.read,nil,'-').result(binding)
    # write the configuration file
    File.open(path,'w') { |f| f.puts config }
  end

  def self.vnc
    if not $options.vnc_port.nil?
      %Q[<graphics type="vnc" port="#{$options.vnc_port}"/>]
    elsif $options.vnc
      "<graphics type='vnc' port='-1' autoport='yes'/>"
    else
      ""
    end
  end


end

begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  $options = OpenStruct.new
  $options.console = false
  $options.debug = false
  $options.file = nil
  $options.bridge = 'nbr0'
  $options.mac = '02:FF:0A:0A:06:1C'
  $options.memory = 1
  $options.vcpu = 1
  $options.vns = false
  $options.vnc_port = nil
  $options.overwrite = false
  $options.name = 'lxdev01.devops.test'
  $options.netboot = false
  $options.disks = Array.new
  $options.disk_type = 'qcow2'
  $options.kernel = nil
  $options.initrd = nil

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S"
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{exec_name} -- #{message}\n"
  end
  $logger.level = Logger::FATAL

  # Read all shell environment variables
  if ENV.has_key? 'VM_TOOLS_DEBUG'
    $options.debug = true
    $logger.level = Logger::DEBUG
  end

  GetoptLong.new(
    ['--bridge','-b',GetoptLong::REQUIRED_ARGUMENT],
    ['--console','-C',GetoptLong::NO_ARGUMENT],
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--disks','-D',GetoptLong::REQUIRED_ARGUMENT],
    ['--disk-type','-t',GetoptLong::REQUIRED_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--kernel','-k',GetoptLong::REQUIRED_ARGUMENT],
    ['--initrd','-i',GetoptLong::REQUIRED_ARGUMENT],
    ['--mac-address','-m',GetoptLong::REQUIRED_ARGUMENT],
    ['--name','-n',GetoptLong::REQUIRED_ARGUMENT],
    ['--net-boot','-N',GetoptLong::NO_ARGUMENT],
    ['--memory','-M',GetoptLong::REQUIRED_ARGUMENT],
    ['--overwrite','-O',GetoptLong::NO_ARGUMENT],
    ['--vcpu','-c',GetoptLong::REQUIRED_ARGUMENT],
    ['--version',GetoptLong::NO_ARGUMENT],
    ['--vnc','-v',GetoptLong::NO_ARGUMENT],
    ['--vnc-port','-p',GetoptLong::REQUIRED_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--bridge'
      $options.bridge = arg
    when '--console'
      $options.console = true
    when '--debug'
      $options.debug = true
    when '--disks'
      arg.split(',').each do |disk|
        $options.disks << disk
      end
    when '--disk-type'
      raise("Disk type #{arg} not supported") unless %w(qcow2 raw).include? arg
      $options.disk_type = arg 
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--kernel'
      $options.kernel = arg
    when '--initrd'
      $options.initrd = arg
    when '--mac-address'
      $options.mac = arg
    when '--memory'
      $options.memory = arg
    when '--name'
      $options.name = arg
    when '--net-boot'
      $options.netboot = arg
    when '--overwrite'
      $options.overwrite = true
    when '--vcpu'
      $options.vcpu = arg
    when '--version'
      $stdout.puts 0.5
      exit 0
    when '--vnc'
      $options.vnc = true
    when '--vnc-port'
      $options.vnc_port = arg
    end
  end

  path = ARGV.shift || "#{ENV['PWD']}/libvirt_instance.xml"
  path = File.expand_path(path)
  Virsh::config(path)
  $stdout.puts "Domain #{$options.name} definition file #{path}"

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-D\''
  end
  exit 1
end

exit 0

__END__
<?xml version="1.0"?>
<domain type="kvm">
  <name><%= name %></name>
  <memory unit='GB'><%= $options.memory %></memory>
  <vcpu><%= $options.vcpu %></vcpu>
  <os>
    <type arch="x86_64">hvm</type>
<% if $options.kernel -%>
    <kernel><%= $options.kernel %></kernel>
<% end -%>
<% if $options.initrd -%>
    <initrd><%= $options.initrd %></initrd>
<% end -%>
<% if $options.netboot -%>
    <boot dev='network'/>
<% end -%>
  </os>
  <clock sync="localtime"/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <features><acpi/></features>
  <devices>
<%#    <emulator>/usr/bin/kvm</emulator> %>
<% if $options.console -%>
    <serial type='pty'> <target port='0'/> </serial>
    <console type='pty'> <target port='0'/> </console>
    <serial type='file'> 
      <source path='<%= dir %>/serial.log' append='on'/> 
      <target port='0'/> 
    </serial>
<% end -%>
    <%= self.vnc %>
    <interface type="bridge">
      <source bridge="<%= $options.bridge %>"/>
      <mac address="<%= $options.mac %>"/>
      <model type="virtio"/>
    </interface>
    <%= disks.join("\n      ") %>
  </devices>
</domain>
