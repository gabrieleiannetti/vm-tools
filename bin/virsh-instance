#!/usr/bin/env ruby
#
# Copyright 2012-2016 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


require 'ostruct'
require 'getoptlong' 
require 'logger'

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
#{exec_name} [<options>] <command> [<arguments]

<command>
  c,  clone <img> <name>          Clone image and start instance 
  f,  fqdn <name>                 Print FQDN of instance
  i,  image                       List available images
  p,  path <name>                 Print path ot the instance
  rm, remove <name>               Undefine and destroy instance
  s,  shadow <img> <name>         Shadow image and start instance 
  sh, shutdown <name>             Shutdown instance
  st, start <name>                Start instance

<options>
  -b, --bridge <name>              Network birdge to use (default nbr0)
      --cdrom <path>               Location of the CDROM ISO for installation.
  -D, --debug                      Show stacktraces in case of errors.
  -s, --disk-size <size>           Image size when creating new images with the 
                                   command "create" (default 100G).
  -R, --dry-run                    Print the commands without execution.    
  -h, --help                       Show this help information.
  -i, --image-path <path>          Location of the source images (default 
                                   /srv/vms/images)
  -p, --instance-path <path>       Location of the virtual machine instances 
                                   (default /srv/vms/instances)
  -l, --location <url>             Installation sources (default Debian stable)
  -O, --no-overwrite               Do not overwrite existing instances.
  -r, --ram <size>                 Instance memory in GB (defaults 1)
      --version                    Print version number

Environment
  VM_IMAGE_PATH                    Image path (like option -i).
  VM_INSTANCE_PATH                 Instance path (like option -p).
EOF

class System 
  def self.exec(command)
    # Remove line-feed and leading white-space
    #
    command = command.gsub(/^  */,'').gsub(/\n/,' ')
    # Redirect error stream
    command + ' 2>&1'
    $logger.debug "Exec [#{command}]"
    return String.new if $options.dry_run
    # Execute command as subprocess and return the exit code
    pipe = IO.popen(command)
    # Get the process ID from the child
    pid = pipe.pid
    # Read the output from the stream
    output = pipe.read
    # Wait for successful return and pass back the code to the caller
    Process.wait(pid)
    state=$?
    $logger.debug "Returned with #{state}"
    if state == 0
      return output
    else
      $logger.warn "Failed to execute [#{command}]"
      return nil
    end
  end
  def self.run(command)
    command = command.gsub(/^  */,'').gsub(/\n/,' ').lstrip
    $logger.debug "Run [#{command}]"
    system(command) unless $options.dry_run
  end
end

module CLI
  def self.ask?(question)
    $stdout.print "#{question} (Enter/Y/y to continue) "
    answer = $stdin.gets.chomp
    if answer.empty? or "Y" == answer.upcase
      true
    else
      false
    end
  end
end

class Virsh

  class Image

    def self.create(path,size = '40G')
      if File.exists?(path) and not $options.overwrite
        return unless CLI.ask?("Overwrite #{path}?")
      end
      dir = File.dirname(path)
      unless File.directory? dir
        System::exec("mkdir -p #{dir}")
      end
      System::exec("qemu-img create -f qcow2 #{path} #{size}")
    end

    def self.list(path)
      $stdout.puts "Images in #{path}:"
      images = Dir.glob("#{path}/**/*.img").map do |image|
        image = image.gsub(%r{#{path}/},'  ').split('/')[0]
      end
      images.uniq.sort.each do |image|
        $stdout.puts image.gsub(%r{#{path}/},'  ').split('/')[0]
      end
    end

    def self.clone(image,instance,args = {})
      # default values
      args[:shadow] = false unless args.has_key? :shadow
      args[:overwrite] = false unless args.has_key? :overwrite

      # Continue if the source virtual machine image exists
      raise("Image #{image} not existing") unless File.directory? image

      name = File.basename instance
      # If the target directory exists?
      #
      if File.directory? instance


        # Is the virtual machine instance running?
        if Virsh.running?(name)

          # Does the users wants to overwrite the virtual machine instance
          if $options.overwrite or CLI.ask?("Remove instance #{name}?")
            # Shutdown and undefined the virtual machine instance
            Virsh.remove(name)
            sleep 5
          else
            $stdout.puts "Instance [#{name}] running..."
            exit 0
          end

        end

        # Delete existing virtual machine instance
        System::exec("rm -rf #{Virsh::path(name)}")

      end
      
      System::exec("mkdir -p #{instance}") unless File.directory? instance

      $logger.info("Copy image #{image}")

      if args[:shadow]
        Dir.glob("#{image}/*.img").each do |disk|
          name = File.basename(disk)
          target = "#{instance}/#{name}"
          $logger.info("Create shadow disk #{target}")
          System::run("qemu-img create -b #{disk} -f qcow2 #{target} >/dev/null")
        end
      end

      System::run("cp --recursive --no-clobber #{image}/* #{instance}") 
    end

  end

  def initialize(image_path,instance_path)
    @image_path = image_path
    @instance_path = instance_path
  end

  ##
  # Create the Libvirt XML configuration file, and the SSH configuration
  # file for a virtual machine instance.
  #
  def self.config(path)
    # extract the instance name from the path
    name = File.basename(path)
    
    # Write the libvirt configuration file
    command = "
      cd #{path};
      virsh-config
        --vnc
        --name #{Virsh.instance name}
        --memory #{$options.ram}
        --mac-address #{Virsh.instance_mac name}
        libvirt_instance.xml
    "
    # Respect the overwrite option set by the user
    command << " --overwrite" if $options.overwrite
    System::run command

    # Create the SSH configuration file for password-less login 
    command = "
      ssh-config-instance
        --user devops
        --identity-file #{path}/keys/id_rsa
        #{Virsh.instance_ip name} #{path}
    "
    # Respect the overwrite option set by the user
    command << " --overwrite" if $options.overwrite
    System::run command
  end

  def self.start(name) 
    # FQDN of the virtual machine instance
    name = self.instance(name)
    # absolute path to the libvirt configuration
    config = "#{self.path(name)}/libvirt_instance.xml"
    if File.exists?(config)
      # define the virtual machine instance if required
      System::run("virsh define #{config} | sed '/^$/d'") unless self.defined?(name)
      # start the virtual machine instance if requried
      System::run("virsh start #{name} | sed '/^$/d'") unless self.running?(name)
    else
      raise("Missing instance configuration: #{name}")
    end
  end

  def self.remove(name)
    System::run("virsh destroy #{Virsh.instance name} | sed '/^$/d'")
    System::run("virsh undefine #{Virsh.instance name} | sed '/^$/d'")
  end

  def self.shutdown(name)
    System::run("virsh shutdown #{Virsh.instance name} | sed '/^$/d'")
  end

  def self.defined?(name)
    name = self.instance(name)
    output = System::exec("virsh list --all --name | grep -s #{name}")
    if output.is_a? String and not output.empty? 
      $logger.debug("Instance #{name} is defined")
      return true
    end
    if output.nil?
      $logger.debug("Instance #{name} is not defined")
      return false
    end
  end

  def self.running?(name)
    name = self.instance(name)
    output = System::exec("virsh list | grep #{name} >/dev/null 2>&1")
    if output.nil?
      return false
    else
      $logger.debug("Instance #{name} running")
      return true
    end
  end

  # absolute path to a virtual machine instance
  def self.path(name)
    $logger.debug("Resolve path for instance [#{name}]")
    "#{$options.instance_path}/#{self.instance(name)}"  
  end

  def self.instance(name)
    # Don't use System::exec here!
    `virsh-nat-bridge lookup #{name}`.split(' ')[0]
  end

  def self.instance_mac(name)
    # Don't use System::exec here!
    `virsh-nat-bridge lookup #{name}`.split(' ')[-1]
  end
  
  def self.instance_ip(name)
    # Don't use System::exec here!
    `virsh-nat-bridge lookup #{name}`.split(' ')[1]
  end
end

begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  $options = OpenStruct.new
  $options.cdrom = nil
  $options.debug = false
  $options.disk_size = '100G'
  $options.dry_run = false
  $options.location = 'http://ftp.de.debian.org/debian/dists/stable/main/installer-amd64/'
  $options.image_path = '/srv/vms/images'
  $options.instance_path = '/srv/vms/instances'
  $options.overwrite = true
  $options.ram = 1 # GB
  $options.shadow = false
  $options.bridge = 'nbr0'

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%d %H:%M:%S "
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{exec_name} -- #{message}\n"
  end
  $logger.level = Logger::FATAL

  GetoptLong.new(
    ['--bridge','-b',GetoptLong::REQUIRED_ARGUMENT],
    ['--cdrom',GetoptLong::REQUIRED_ARGUMENT],
    ['--debug','-D',GetoptLong::NO_ARGUMENT],
    ['--disk-size','-s',GetoptLong::REQUIRED_ARGUMENT],
    ['--dry-run','-R',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--image-path','-i',GetoptLong::REQUIRED_ARGUMENT],
    ['--instance-path','-p',GetoptLong::REQUIRED_ARGUMENT],
    ['--location','-l',GetoptLong::REQUIRED_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--no-overwrite','-O',GetoptLong::NO_ARGUMENT],
    ['--ram','-r',GetoptLong::REQUIRED_ARGUMENT],
    ['--version',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--bridge'
      $options.bridge = arg
    when '--cdrom'
      $options.cdrom = arg
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--disk-size'
      $options.disk_size = arg
    when '--dry-run'
      $options.debug = true
      $logger.level = Logger::DEBUG
      $options.dry_run = true
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--image-path'
      $options.image_path = arg
    when '--instance.path'
      $options.instance_path =arg
    when '--location'
      $options.location = arg
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--no-overwrite'
      $options.overwrite = false
    when '--ram'
      $options.ram = arg
    when '--version'
      $stdout.puts 1.2
      exit 0
    end
  end

  command = ARGV.shift || raise('Expecting command argument!')

  $options.image_path = ENV['VM_IMAGE_PATH'] if ENV.has_key? 'VM_IMAGE_PATH'
  $options.instance_path = ENV['VM_INSTANCE_PATH'] if ENV.has_key? 'VM_INSTANCE_PATH'

  case command

  when 'clone','cl','c','shadow','sh','s'

    # check user arguments
    image = ARGV.shift || raise('Expecting image name as argument!')
    image = "#{$options.image_path}/#{image}"
    name = ARGV.shift || raise('Expecting instance name as argument')

    # Append domain name if missing
    name = Virsh::instance(name)
    # Path to virtual machine instance
    path = Virsh::path(name)

    # clone options
    options = Hash.new
    options[:shadow] = true if %w(shadow sh s).include? command 
    options[:overwrite] = true if $options.overwrite

    Virsh::Image.clone(image,path,options)
    Virsh.config(path)
    Virsh.start(name)

  when 'image','i'

    Virsh::Image.list($options.image_path)

  when 'fqdn','f'

    name = ARGV.shift || raise('Expecting the name of a virtual machine instance')
    $stdout.puts Virsh::instance(name)

  when 'remove','rm','r','shutdown','sh'

    name = ARGV.shift || raise('Expecting the name of a virtual machine instance')

    # Append domain name if missing
    name = Virsh::instance(name)

    if Virsh.running?(name)
      case command
      when 'remove','rm','r'
        Virsh.remove(name)
      when 'shutdown','sh'
        Virsh.shutdown(name)
      end
    else
      $stdout.puts("Instance #{name} not running.")
    end

  when 'start','st'

    name = ARGV.shift || raise('Expecting name as argument!')
    Virsh.start(name)
  
  when 'path','p'

    # Name of the virtual machine instance
    name = ARGV.shift || raise('Expecting name as argument!')
    $stdout.puts Virsh.path(name)

  when 'help'
    $stdout.puts HELP
    exit 0

  else
    raise("Command #{command} unknown!")

  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
